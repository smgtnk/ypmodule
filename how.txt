Создание модуля

1. Создадим новую директорию ypmodule:
mkdir ypmodule
cd ypmodule

2. Инициализируем модуль внутри директории стандартной утилитой go mod:
go mod init ypmodule 

В директории создался файл go.mod, содержащий:
module ypmodule
go 1.19

3. 
├── main
    ├── main.go
    └── go.mod 
└── ypmodule
    ├── calc
    │   └── math.go
    └── go.mod 

4. Поскольку сейчас работаем с локальным модулем (то есть его код лежит только на нашей файловой системе), 
для определения его положения на локальном диске нужно воспользоваться директивой replace.

replace ypmodule => ../ypmodule   

5. Так как ypmodule содержит внутри себя другие пакеты и зависимости, их тоже нужно указать. 
Можно не знать о зависимостях и структуре этого модуля, выполнив команду

go get ypmodule

В go.mod появилась строка:

require ypmodule v0.0.0-00010101000000-000000000000 // indirect 

Она указывает, какую конкретно версию модуля ypmodule будет использовать main при сборке. 
Комментарий // indirect подсказывает, что сам пакет ypmodule в коде не импортируется, только calc.

6. В случае использования go get установка стороннего пакета выглядит так:
go get github.com/username/packagename
После этого скачанные данные будут помещены в GOPATH/src/username/packagename.

7. В случае использования go.mod 
require github.com/stretchr/testify v1.7.0 

будет создан специальный файл go.sum, обеспечивающий стопроцентную воспроизводимость запусков. 
Он содержит хеш-суммы всех модулей и тем самым гарантирует воспроизводимую установку модулей на разных окружениях.

Если требуется увеличить версию пакета до некоторого значения (например, v1.2.3), нужно выполнить следующие команды:
git tag v1.2.3
git push --tags 

Иногда нужно подменить библиотеку в коде её форком (копией), но при этом не менять все пути импорта.

replace (
    golang.org/x/net v1.2.3 => example.com/fork/net v1.4.5
    golang.org/x/net => example.com/fork/net v1.4.5
) 